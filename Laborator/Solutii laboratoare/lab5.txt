-----------------sys:
create context aplicatie_ctx using proced_aplicatie_ctx;

create or replace procedure proced_aplicatie_ctx is
  v_lang varchar2(50);
begin
  select sys_context('userenv', 'language') into v_lang from dual;
  dbms_output.put_line(v_lang);
  if v_lang not like '%ROMANIAN%' then
    dbms_output.put_line('Pentru ca nu este setata limba romana 
    nu aveti voie sa modificati in campul de nume si prenume utilizator');
    dbms_session.set_context('APLICATIE_CTX', 'lang_ro', 'nu');
   else 
    dbms_session.set_context('APLICATIE_CTX', 'lang_ro', 'da');
   end if; 
end;
/

-----------elearn_app_admin:

create or replace trigger tr_insert_update_user
before insert or update on elearn_app_admin.utilizator
for each row
declare
  v_poate varchar2(4);
begin
  v_poate := sys_context('aplicatie_ctx', 'lang_ro');
  if (v_poate = 'nu') then
    dbms_output.put_line ('Nu aveti voie sa inserati nume si prenume fara diacritice');
    :new.nume := null;
    :new.prenume := null;
  end if;
end;
/

--------elearn_app_admin:
CREATE OR REPLACE PROCEDURE PROC_CURSOR_DINAM(cerere_sql VARCHAR2) AS
  TYPE tip_ref_c IS REF CURSOR;
  ref_c tip_ref_c;
  v_rand rezolva%rowtype;
BEGIN
  OPEN ref_c FOR cerere_sql;
  LOOP
    FETCH ref_c INTO v_rand;
    EXIT WHEN ref_c%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('STUDENTUL:'||v_rand.id_stud || ' la tema ' || v_rand.id_tema || ' are nota ' ||
                          nvl(v_rand.nota, 0));
  END LOOP;
  CLOSE ref_c;
END;
/

grant execute on PROC_CURSOR_DINAM to elearn_profesor1;

insert into rezolva values(1,1,sysdate, 10, 1);
insert into rezolva values(1,2,sysdate, 10, 2);

commit;

--exercitii
--1
--sys:
create context aplicatie_ctx_2 using proced_aplicatie_ctx_2;

create or replace procedure proced_aplicatie_ctx_2 is
  v_ora number(3);
begin
  select to_number(to_char(sysdate, 'hh24')) into v_ora from dual;
  
  dbms_output.put_line('Este ora: ' || v_ora);
  
  if v_ora < 8 or v_ora > 20 then
    dbms_output.put_line('Sunteti in afara orelor de program.');
    dbms_session.set_context('aplicatie_ctx_2', 'ora_potrivita', 'nu');
  else 
    dbms_session.set_context('aplicatie_ctx_2', 'ora_potrivita', 'da');
  end if;
end;
/

exec proced_aplicatie_ctx_2;

--elearn_app_admin
create or replace trigger tr_insert_update_rezolva
before insert or update on elearn_app_admin.rezolva
for each row
declare
  v_poate varchar2(4);
begin
  v_poate := sys_context('aplicatie_ctx_2', 'ora_potrivita');
  if (v_poate = 'nu') then
    dbms_output.put_line ('Nu aveti voie sa acordati note in afara orelor de program');
    :new.nota := 99;
  end if;
end;
/


grant select, update(nota, id_corector) on rezolva to elearn_profesor1;
grant select, update(nota, id_corector) on rezolva to elearn_profesor2;
grant select, update(nota, id_corector) on rezolva to elearn_asistent3;

----sys:

create or replace trigger tr_after_logon
after logon on database
declare
  v_user varchar2(30);
begin
  v_user := sys_context('userenv', 'session_user');
  
  if lower(v_user) like '%elearn_profesor%' or lower(v_user) like '%elearn_asistent%' then
    proced_aplicatie_ctx_2;
  end if;
end;
/

---elearn_profesor1:

select * from elearn_app_admin.rezolva;

update elearn_app_admin.rezolva
set nota=9, id_corector=1
where id_tema=1 and id_stud=2;

rollback;

--2
--elearn_app_admin:
create or replace procedure proc_dinam_2(cerere_sql varchar2)
is
begin
  execute immediate cerere_sql;
  dbms_output.put_line('Numarul de inrtegistrari: ' || SQL%rowcount);
end;
/

grant execute on proc_dinam_2 to elearn_profesor1;

--3
execute gasiti_pericole('2019');
execute gasiti_pericole('01-2019');


execute gasiti_pericole('01-2019%'' union select id as idstud, 99 as idtema, an_intrare as data_upload, 99 as nota, 99 as idcorector from utilizator where numeuser like ''');

execute gasiti_pericole('01-2019%'' and id_stud in (select id from cursant where realure_studii=1) and ''AAA'' LIKE ''');
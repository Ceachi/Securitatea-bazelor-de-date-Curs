/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-01-20 07:40:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>JSP Page</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<h1>This is SQLInjection Example!</h1>\n");
      out.write("\n");
      out.write("\t<h2> Table User: </h2>\n");
      out.write("\t<img src=\"database.JPG\" alt=\"table User\">\n");
      out.write(" \n");
      out.write("\t<h2>Example of Tauntology</h2>\n");
      out.write("\t\n");
      out.write("\tThe aim of a tautology-based attack is to inject code in one or more conditional statements such that the<br>\n");
      out.write("\tevaluation is always true. In this type of SQLIA, an attacker exploits an injectable field that is used in a query’s<br>\n");
      out.write("\tWHERE conditional i.e. the queries always return results upon evaluation of a WHERE conditional parameter.<br>\n");
      out.write("\tAll the rows in the database table targeted by the query are returned while transforming the conditional into a<br>\n");
      out.write("\ttautology. Example: In this example, an attacker submits “ ’ or 1=1 - -” for the login input field (the input<br>\n");
      out.write("\tsubmitted for the other fields is irrelevant). The resulting query is:<br><br><br>\n");
      out.write("\tSELECT accounts FROM users WHERE<br>\n");
      out.write("\tlogin=’’ or 1=1 -- AND pass=’’ AND pin=<br>\n");
      out.write("\tThe code injected in the conditional (OR 1=1) transforms the entire WHERE clause into a tautology<br>\n");
      out.write("\t<br>\n");
      out.write("\t<br>\n");
      out.write("\t\n");
      out.write("\tPractical:<br>\n");
      out.write("\t\n");
      out.write("\tQuery: \"SELECT * FROM User where userid='\"+user+\"' and password='\"+password+\"'\";<br><br>\n");
      out.write("\tSQL Injection:<br>\n");
      out.write("\t   \n");
      out.write("\ta) username : something' or 1=1 --<br>\n");
      out.write("\t   password: '<br>\n");
      out.write("\tb) username : ' or 1=1 -- <br>\n");
      out.write("\t   password :' <br> \n");
      out.write("\t   \n");
      out.write("\t   \n");
      out.write("\t<form action=\"userCheck\">\n");
      out.write("\t\t<input type=\"text\" placeholder=\"Username\" name=\"username\"> \n");
      out.write("\t\t<input type=\"text\" placeholder=\"Password\" name=\"password\">\n");
      out.write("\t\t<button type=\"submit\">Login</button>\n");
      out.write("\t</form>\n");
      out.write("\t\n");
      out.write("\t<br>\n");
      out.write("\tCorrection using PrepareStatement:<br><br>\n");
      out.write("\tQuery = \"SELECT * FROM User WHERE userId = ? and password = ?\"<br>\n");
      out.write("\t<form action=\"userCheckCorrection\">\n");
      out.write("\t\t<input type=\"text\" placeholder=\"Username\" name=\"username\"> \n");
      out.write("\t\t<input type=\"text\" placeholder=\"Password\" name=\"password\">\n");
      out.write("\t\t<button type=\"submit\">Login</button>\n");
      out.write("\t</form>\n");
      out.write("\t<br><br>\n");
      out.write("\t<h2>Example of Inference</h2>\n");
      out.write("\t\n");
      out.write("\tIn this attack, the query is being modified into the form of an action which is executed based on the answer to a<br>\n");
      out.write("\ttrue/-false question about data values in the database. In this type of injection, attacker try to attack a site that is<br>\n");
      out.write("\tenough secured not to provide acceptable feedback via database error messages when an injection has<br>\n");
      out.write("\tsucceeded. The attacker must use a different method to obtain the response from the database since database<br>\n");
      out.write("\terror messages are unavailable to him. In this situation, the attacker injects commands into the site and then<br>\n");
      out.write("\tobserves how the function/response of the website changes. By carefully observing the changing behavior of the<br>\n");
      out.write("\tsite , attacker can extrapolate not only vulnerable parameters, but also additional information about the values in<br>\n");
      out.write("\tthe database. Researchers have reported that with these techniques they have been able to achieve a data\n");
      out.write("\textraction rate of 1B/s .<br><br>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\tExample: Consider two possible injections into the login field. The first being “legalUser’ and 1=0 - -” and the<br>\n");
      out.write("second, “legalUser’ and 1=1 - ”.These injections result in the following two queries:<br><br>\n");
      out.write("\tSELECT accounts FROM users WHERE login=’legalUser’<br>\n");
      out.write("\tand 1=0 -- ’ AND pass=’’ AND pin=0<br>\n");
      out.write("\tSELECT accounts FROM users WHERE login=’legalUser’<br>\n");
      out.write("\tand 1=1 -- ’ AND pass=’’ AND pin=0<br><br>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\tIn the first scenario, the application is secure and the input for login is validated correctly. In this case, both<br>\n");
      out.write("\tinjections would return login error messages, and the attacker would know that the login parameter is not<br>\n");
      out.write("\tvulnerable. In the second scenario, application is insecure and the login parameter is vulnerable to injection. The<br>\n");
      out.write("\tattacker submits the first injection and, gets a login error message, because it always evaluates to false.<br>\n");
      out.write("\tHowever, the attacker does not know if this is because the application validated the input correctly and blocked<br>\n");
      out.write("\tthe attack attempt or because the attack itself caused the login error. The attacker then submits the second query,<br>\n");
      out.write("\twhich always evaluates to true. If in this case there is no login error message, then the attacker knows that the<br>\n");
      out.write("\tattack went through and that the login parameter is vulnerable to injection<br><br>\n");
      out.write("\t\n");
      out.write("\tYou can test it here for table User<br>\t\n");
      out.write("\tQuery: \"SELECT * FROM User where userid='\"+user+\"' and password='\"+password+\"'\";<br>\n");
      out.write("\tSQL Injection:<br>\n");
      out.write("\tFirst scenario:<br>\n");
      out.write("\t<!-- a) username : sandeep' and 1=0 --<br>\n");
      out.write("\t   password: '<br>\n");
      out.write("\t Second scenario:<br>\n");
      out.write("\t a) username : sandeep' and 1=1 --<br>\n");
      out.write("\t   password: '<br> -->\n");
      out.write("\t   \n");
      out.write("\t a) username : sandeep' and 1=0 --<br>\n");
      out.write("\t   password:'<br>\n");
      out.write("\t   and we observe that we don't get the message in console: SELECT * FROM User WHERE userId = 'sandeep\\' and 1=0 --' and password = '\\'' <br>\n");
      out.write("\t   this means that we got vulnerabilities in the query <br>\n");
      out.write("\t   Now we know we can make sql injection : <br>\n");
      out.write("\t b) username : sandeep' and 1=1 --<br>\n");
      out.write("\t   password:'<br>\n");
      out.write("\t<form action=\"userCheck\">\n");
      out.write("\t\t<input type=\"text\" placeholder=\"Username\" name=\"username\"> \n");
      out.write("\t\t<input type=\"text\" placeholder=\"Password\" name=\"password\">\n");
      out.write("\t\t<button type=\"submit\">Login</button>\n");
      out.write("\t</form>\n");
      out.write("\t\n");
      out.write(" \t<h2>Example Basic UNION Queries</h2>\n");
      out.write(" \t\n");
      out.write(" \tThe set operator UNION is frequently used in SQL injection attacks. The goal is to manipulate a SQL statement into returning rows from another table<br><br>\n");
      out.write(" \tQuery: \"SELECT * FROM  User where userid='\"+user+\"'\";<br>\n");
      out.write(" \tusername: 'ramki' UNION SELECT * FROM User Where '1'='1' <br>\n");
      out.write("\t<form action=\"example0\">\n");
      out.write("\t\t<input type=\"text\" placeholder=\"Username\" name=\"username\"> \n");
      out.write("\t\t<input type=\"text\" placeholder=\"Password\" name=\"password\">\n");
      out.write("\t\t<button type=\"submit\">Login</button><br>\n");
      out.write("\t</form>\n");
      out.write("\t\n");
      out.write("\tOther examples:<br>\n");
      out.write("\t1) ' ' or 1 = '1' <br>\n");
      out.write("\t2) Find database name:  <br>\n");
      out.write("\tFirst try: <br>\n");
      out.write("\t' ' union select table_schema from information_schema.tables union select '1' <br>\n");
      out.write("\there we get the error message:  The used SELECT statements have a different number of columns <br>\n");
      out.write("\tSecond try: <br> \n");
      out.write("\t ' ' union select 1, 1, 1, 1, 1, 1, 1,table_schema from information_schema.tables union select 1,1,1,1,1,1,1,'1' <br>\n");
      out.write("\twhere table_schema is the database name <br>\n");
      out.write("\t3) Find table names : <br>\n");
      out.write("\t' ' union select 1, 1, 1, 1, 1, 1, 1,table_name from information_schema.tables where table_schema = 'test' union select 1,1,1,1,1,1,1,'1'<br>\n");
      out.write("\t4) Enumerate columns of table 'user' <br>\n");
      out.write("\t' ' union select 1, 1, 1, 1, 1, 1, 1,column_name from information_schema.columns where table_name = 'user' union select 1,1,1,1,1,1,1,'1'<br>\n");
      out.write("\t\n");
      out.write("\t5) Dump userId and password: <br>\n");
      out.write("\t' ' union select 1, 1, 1, 1, 1, 1, 1,concat(userId, \":\",password) from User union all select 1,1,1,1,1,1,1,'1'<br>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t<h2> Example Piggy-Backed Queries</h2>\n");
      out.write("\t\n");
      out.write("\tIn this SQLIA, attackers do not aim to modify the query instead; they try to include new and distinct queries into<br>\n");
      out.write("\tthe original query. This result database to receive multiple SQL queries and can be proved extremely harmful.<br>\n");
      out.write("\tExample: If the attacker inputs “’; drop table users - -” into the pass field, the application generates the query:<br><br>\n");
      out.write("\tSELECT accounts FROM users WHERE login=’doe’ AND<br>\n");
      out.write("\tpass=’’; drop table users -- ’ AND pin=123<br><br>\n");
      out.write("\tAfter execution of first query, the database would recognize the query delimiter (“;”) and proceed for the<br>\n");
      out.write("\tinjected second query. The execution of second query would lead to drop table ‘users’, which would likely<br>\n");
      out.write("\tdamage valuable information<br>\n");
      out.write("\t\n");
      out.write("\tExample:<br>\n");
      out.write("\tQuery: \"SELECT * FROM User where userid='\"+user+\"' and password='\"+password+\"'\";<br>\n");
      out.write("\tusername = sandeep<br>\n");
      out.write("\tpassword = ';drop table user -- <br>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t<form action=\"userCheck\">\n");
      out.write("\t\t<input type=\"text\" placeholder=\"Username\" name=\"username\"> \n");
      out.write("\t\t<input type=\"text\" placeholder=\"Password\" name=\"password\">\n");
      out.write("\t\t<button type=\"submit\">Login</button>\n");
      out.write("\t</form>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("<!-- \t<h2> Example </h2>\n");
      out.write("\tQuery: \"SELECT email, password, userId, firstName FROM User where email='\"+email+\"'\"</br>\t\n");
      out.write("\t<form action=\"example2\">\n");
      out.write("\t\t<input type=\"text\" placeholder=\"Email\" name=\"email\"> \n");
      out.write("\t\t<button type=\"submit\">Submit</button>\n");
      out.write("\t</form> -->\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
